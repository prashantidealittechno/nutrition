-- ======================================================================
-- Canadian Nutrient File (CNF), 2015 (http://www.healthcanada.gc.ca/cnf)
-- This file was generated by http://github.com/m5n/nutriana
-- Run this SQL with an account that has admin priviledges, e.g.: mysql --local_infile=1 -v -u root < canadian_nf_mysql.sql
-- ======================================================================

drop database if exists canadian_nf;
create database canadian_nf;
use canadian_nf;
grant all on canadian_nf.* to 'food'@'localhost' identified by 'food';

-- This is a principal file. It stores information about each food in the database. It contains a description of each food in English and French as well as dates and comments.
create table FOOD_NAME (
    FoodID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records. This is the primary key.
    FoodCode int(8) unsigned not null,   -- Identifier code for the foods. In the 2007b version this was the FD_C
    FoodGroupID bigint(15) unsigned not null,   -- Sequential number generated by the database for the food groups
    FoodSourceID bigint(15) unsigned not null,   -- Sequential number generated by the database for the food sources.
    FoodDescription varchar(255) not null,   -- Complete food name in English
    FoodDescriptionF varchar(255) not null,   -- Complete food name in French
    FoodDateOfEntry date not null,   -- Date the food name data was entered into the database
    FoodDateOfPublication date,   -- Date the food name data was originally published
    CountryCode bigint(20) unsigned,   -- Corresponds to the USDA NDB code
    ScientificName varchar(100)   -- Scientific name of the food
);

-- This is the main file. It uses information (by linking) from the FOOD NAME table (among others) to identify which nutrients and amounts are recorded for that food.
create table NUTRIENT_AMOUNT (
    FoodID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records.
    NutrientID smallint(4) unsigned not null,   -- Sequential number generated by the database for the nutrient names
    NutrientValue dec(12, 5) unsigned not null,   -- Mean value in 100g, edible portion. (The number of decimal places does not reflect the accuracy of the data.).
    StandardError dec(8, 4) unsigned,   -- Standard error of the mean
    NumberOfObservations mediumint(6) unsigned,   -- Number of samples
    NutrientSourceID bigint(15) unsigned not null,   -- Identifier code generated by the database for the nutrient source
    NutrientDateOfEntry date not null   -- Date the data was entered into the database
);

-- This is a principal file. This file contains portion size conversion factors. The conversion factors are food specific multipliers by which the nutrient values for each food may be multiplied to give the nutrients in described portions.
create table CONVERSION_FACTOR (
    FoodID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records.
    MeasureID bigint(10) unsigned not null,   -- Sequential number generated by the database for the measure descriptions
    ConversionFactorValue bigint(10) unsigned not null,   -- The factor by which one would multiply the nutrient per 100g to obtain nutrient amounts per the measure described (the weight of that food in the measure described divided by 100)
    ConvFactorDateOfEntry date not null   -- Date the data was entered into the database
);

-- This is a principal file. This file contains the percent of refuse, or inedible portion, for each food.
create table REFUSE_AMOUNT (
    FoodID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records.
    RefuseID bigint(10) unsigned not null,   -- Sequential number generated by the database for the refuse descriptions
    RefuseAmount dec(9, 5) unsigned not null,   -- Percent refuse
    RefuseDateOfEntry date not null   -- Date the data was entered into the database
);

-- This is a principal file. This file contains the yield from refuse and/or cooking losses assigned to certain foods. These yields are most often used for food inventory purposes.
create table YIELD_AMOUNT (
    FoodID int(8) unsigned not null,   -- Sequential number generated by the database identifying the food records.
    YieldID bigint(10) unsigned not null,   -- Sequential number generated by the database for the yield descriptions
    YieldAmount dec(9, 5) unsigned not null,   -- Yield from refuse and/or cooking losses
    YieldDateOfEntry date not null   -- Date the data was entered into the database
);

-- This file is a support or "list" table that is used to link to the FOOD NAME table. It contains a list of 23 different group headings (in English and French) based on similar characteristics of the foods.
create table FOOD_GROUP (
    FoodGroupID bigint(15) unsigned not null,   -- Sequential number generated by the database for the food groups
    FoodGroupCode bigint(15) unsigned not null,   -- Identifier code for the Canadian Nutrient File food groups. There are 23 different CNF food groups
    FoodGroupName varchar(200) not null,   -- Food group name in English
    FoodGroupNameF varchar(200) not null   -- Food group name in French
);

-- This file is a support or "list" table that is used to link to the FOOD NAME table. It contains a list of several food sources (in English and French) that foods can be grouped on.
create table FOOD_SOURCE (
    FoodSourceID bigint(15) unsigned not null,   -- Sequential number generated by the database for the food sources
    FoodSourceCode bigint(15) unsigned not null,   -- Identifier code for the food sources. Food sources give an indication as to Canadian content
    FoodSourceDescription varchar(200) not null,   -- Food Source description in English
    FoodSourceDescriptionF varchar(200) not null   -- Food Source description in French
);

-- This file is a support or "list" table that contains the list of nutrients (in English and French) used in the NT_AMT file, with which it is linked.
create table NUTRIENT_NAME (
    NutrientID smallint(4) unsigned not null,   -- Sequential number generated by the database for the nutrient names
    NutrientCode bigint(15) unsigned not null,   -- Identifier code for nutrient name descriptions
    NutrientSymbol varchar(10) not null,   -- Nutrient symbol or abbreviation of the nutrients. They may differ from international nomenclature.
    NutrientUnit varchar(8) not null,   -- Unit of measure (e.g., mg, g, mcg)
    NutrientName varchar(200) not null,   -- Nutrient name in English
    NutrientNameF varchar(200) not null,   -- Nutrient name in French
    Tagname varchar(20),   -- International Network of Food Data Systems (INFOODS) Tagnames. A unique Abbreviation for a food component developed by INFOODS to aid in the interchange of data.
    NutrientDecimals bigint(15) unsigned not null   -- Number of decimal places used in the rounding of the nutrient value
);

-- This file is a support or "list" table that is used to link to the NUTRIENT AMOUNT file. It contains a list of several sources and/or types of nutrient data (in English and French).
create table NUTRIENT_SOURCE (
    NutrientSourceID bigint(15) unsigned not null,   -- Sequential number generated by the database for the nutrient sources
    NutrientSourceCode bigint(15) unsigned not null,   -- Identifier code for nutrient source descriptions.
    NutrientSourceDescription varchar(200) not null,   -- Nutrient source description in English
    NutrientSourceDescriptionF varchar(200) not null   -- Nutrient source description in French
);

-- This file is a support or "list" table that is used to link to the CONV FAC table. It contains a list of measures (in English and French).
create table MEASURE_NAME (
    MeasureID bigint(10) unsigned not null,   -- Sequential number generated by the database for the measure descriptions
    MeasureName varchar(200) not null,   -- Measure description in English
    MeasureNameF varchar(200) not null   -- Measure description in French
);

-- This file is a support or "list" table that is used to link to the REFUSE table. It contains a list of refuse types.
create table REFUSE_NAME (
    RefuseID bigint(10) unsigned not null,   -- Sequential number generated by the database for the refuse descriptions
    RefuseName varchar(200) not null,   -- Refuse description in English
    RefuseNameF varchar(200) not null   -- Refuse description in French
);

-- This file is a support or "list" table that is used to link to the YIELD table. It contains a list of yield types or yield descriptions (in English and French).
create table YIELD_NAME (
    YieldID bigint(10) unsigned not null,   -- Sequential number generated by the database for the yield descriptions
    YieldName varchar(200) not null,   -- Yield description in English
    YieldNameF varchar(200) not null   -- Yield description in French
);

-- Load data into FOOD_NAME
load data local infile './data.processed/FOOD_NAME.csv.trimmed'
    into table FOOD_NAME
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (FoodID, FoodCode, FoodGroupID, FoodSourceID, FoodDescription, FoodDescriptionF, @date1, @date2, CountryCode, ScientificName)
    set
    FoodDateOfEntry = str_to_date(@date1, '%Y-%m-%d'),
    FoodDateOfPublication = str_to_date(@date2, '%Y-%m-%d');
-- Assert all 5690 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from FOOD_NAME);
delete from tmp where c = 5690;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into NUTRIENT_AMOUNT
load data local infile './data.processed/NUTRIENT_AMOUNT.csv.trimmed'
    into table NUTRIENT_AMOUNT
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (FoodID, NutrientID, NutrientValue, StandardError, NumberOfObservations, NutrientSourceID, @date1)
    set
    NutrientDateOfEntry = str_to_date(@date1, '%Y-%m-%d');
-- Assert all 524674 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from NUTRIENT_AMOUNT);
delete from tmp where c = 524674;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into CONVERSION_FACTOR
load data local infile './data.processed/CONVERSION_FACTOR.csv.trimmed'
    into table CONVERSION_FACTOR
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (FoodID, MeasureID, ConversionFactorValue, @date1)
    set
    ConvFactorDateOfEntry = str_to_date(@date1, '%Y-%m-%d');
-- Assert all 19505 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from CONVERSION_FACTOR);
delete from tmp where c = 19505;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into REFUSE_AMOUNT
load data local infile './data.processed/REFUSE_AMOUNT.csv.trimmed'
    into table REFUSE_AMOUNT
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (FoodID, RefuseID, RefuseAmount, @date1)
    set
    RefuseDateOfEntry = str_to_date(@date1, '%Y-%m-%d');
-- Assert all 6897 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from REFUSE_AMOUNT);
delete from tmp where c = 6897;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into YIELD_AMOUNT
load data local infile './data.processed/YIELD_AMOUNT.csv.trimmed'
    into table YIELD_AMOUNT
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (FoodID, YieldID, YieldAmount, @date1)
    set
    YieldDateOfEntry = str_to_date(@date1, '%Y-%m-%d');
-- Assert all 1426 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from YIELD_AMOUNT);
delete from tmp where c = 1426;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into FOOD_GROUP
load data local infile './data.processed/FOOD_GROUP.csv.trimmed'
    into table FOOD_GROUP
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (FoodGroupID, FoodGroupCode, FoodGroupName, FoodGroupNameF)
;
-- Assert all 23 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from FOOD_GROUP);
delete from tmp where c = 23;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into FOOD_SOURCE
load data local infile './data.processed/FOOD_SOURCE.csv.trimmed'
    into table FOOD_SOURCE
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (FoodSourceID, FoodSourceCode, FoodSourceDescription, FoodSourceDescriptionF)
;
-- Assert all 16 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from FOOD_SOURCE);
delete from tmp where c = 16;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into NUTRIENT_NAME
load data local infile './data.processed/NUTRIENT_NAME.csv.trimmed'
    into table NUTRIENT_NAME
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (NutrientID, NutrientCode, NutrientSymbol, NutrientUnit, NutrientName, NutrientNameF, Tagname, NutrientDecimals)
;
-- Assert all 152 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from NUTRIENT_NAME);
delete from tmp where c = 152;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into NUTRIENT_SOURCE
load data local infile './data.processed/NUTRIENT_SOURCE.csv.trimmed'
    into table NUTRIENT_SOURCE
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (NutrientSourceID, NutrientSourceCode, NutrientSourceDescription, NutrientSourceDescriptionF)
;
-- Assert all 20 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from NUTRIENT_SOURCE);
delete from tmp where c = 20;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into MEASURE_NAME
load data local infile './data.processed/MEASURE_NAME.csv.trimmed'
    into table MEASURE_NAME
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (MeasureID, MeasureName, MeasureNameF)
;
-- Assert all 1177 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from MEASURE_NAME);
delete from tmp where c = 1177;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into REFUSE_NAME
load data local infile './data.processed/REFUSE_NAME.csv.trimmed'
    into table REFUSE_NAME
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (RefuseID, RefuseName, RefuseNameF)
;
-- Assert all 150 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from REFUSE_NAME);
delete from tmp where c = 150;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Load data into YIELD_NAME
load data local infile './data.processed/YIELD_NAME.csv.trimmed'
    into table YIELD_NAME
    fields terminated by ',' optionally enclosed by '"'
    lines terminated by '\n'
    ignore 1 lines
    (YieldID, YieldName, YieldNameF)
;
-- Assert all 79 records were loaded
create table tmp (c int unique key);
insert into tmp (c) values (2);
insert into tmp (select count(*) from YIELD_NAME);
delete from tmp where c = 79;
insert into tmp (select count(*) from tmp);
drop table tmp;

-- Correct data inconsistencies, if any

-- Add primary keys
alter table FOOD_NAME add primary key (FoodID);
alter table FOOD_GROUP add primary key (FoodGroupID);
alter table FOOD_SOURCE add primary key (FoodSourceID);
alter table NUTRIENT_NAME add primary key (NutrientID);
alter table NUTRIENT_SOURCE add primary key (NutrientSourceID);
alter table MEASURE_NAME add primary key (MeasureID);
alter table REFUSE_NAME add primary key (RefuseID);
alter table YIELD_NAME add primary key (YieldID);

-- Add foreign keys
alter table FOOD_NAME add foreign key (FoodGroupID) references FOOD_GROUP(FoodGroupID);
alter table FOOD_NAME add foreign key (FoodSourceID) references FOOD_SOURCE(FoodSourceID);
alter table NUTRIENT_AMOUNT add foreign key (FoodID) references FOOD_NAME(FoodID);
alter table NUTRIENT_AMOUNT add foreign key (NutrientID) references NUTRIENT_NAME(NutrientID);
alter table NUTRIENT_AMOUNT add foreign key (NutrientSourceID) references NUTRIENT_SOURCE(NutrientSourceID);
alter table CONVERSION_FACTOR add foreign key (FoodID) references FOOD_NAME(FoodID);
alter table CONVERSION_FACTOR add foreign key (MeasureID) references MEASURE_NAME(MeasureID);
alter table REFUSE_AMOUNT add foreign key (FoodID) references FOOD_NAME(FoodID);
alter table REFUSE_AMOUNT add foreign key (RefuseID) references REFUSE_NAME(RefuseID);
alter table YIELD_AMOUNT add foreign key (FoodID) references FOOD_NAME(FoodID);
alter table YIELD_AMOUNT add foreign key (YieldID) references YIELD_NAME(YieldID);
